generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  uid                 String                @id @unique @default(uuid(7)) @db.Uuid()
  first_name          String                @db.VarChar(40)
  last_name           String                @db.VarChar(40)
  username            String                @db.VarChar(255)
  email               String                @db.VarChar(40)
  password            String                @db.VarChar(225)
  balance             Decimal               @default(0.00) @db.Decimal(10, 2)
  icon_url            String?
  remember_token      String?               @db.VarChar(225)
  created_at          DateTime              @default(now()) @db.Timestamp(3)
  updated_at          DateTime?             @updatedAt
  deleted_at          DateTime?             @db.Timestamp(3)
  subscribe           subscribers[]
  drafts              drafts[]
  campaign_schedules  campaign_schedules[]
  user_password_reset user_password_reset[]
  campaign_reports    campaign_reports[]

  @@unique([email])
  @@unique([username])
  @@index([username])
  @@index([uid])
  @@index([email])
}

model drafts {
  uid               String               @id @unique @default(uuid(7)) @db.Uuid()
  user_uid          String               @db.Uuid()
  campaign_name     String               @db.VarChar(20)
  title             String               @db.VarChar(40)
  message           String               @db.VarChar(250)
  last_modified     DateTime             @db.Timestamp(6)
  target_user       recipient
  token_subscriber  String?              @db.VarChar(225)
  device            String               @db.VarChar(40)
  upload_image      String               @db.VarChar(255)
  upload_file       String               @db.VarChar(255)
  created_at        DateTime             @default(now()) @db.Timestamp(3)
  updated_at        DateTime?            @updatedAt
  deleted_at        DateTime?            @db.Timestamp(3)
  schedules         campaign_schedules[]
  user              users                @relation(fields: [user_uid], references: [uid], onUpdate: Restrict)

  @@index([uid])
  @@index([user_uid])
}

model campaign_schedules {
  uid           String    @id @unique @default(uuid(7)) @db.Uuid()
  user_uid      String    @db.Uuid()
  draft_uid     String    @db.Uuid()
  type          String    @db.VarChar(40)
  datetime_send DateTime  @db.Timestamp(0)
  status        status
  created_at    DateTime  @default(now()) @db.Timestamp(3)
  updated_at    DateTime? @updatedAt
  deleted_at    DateTime? @db.Timestamp(3)
  draft         drafts    @relation(fields: [draft_uid], references: [uid])
  user          users     @relation(fields: [user_uid], references: [uid], onUpdate: Restrict)

  @@index([uid])
  @@index([user_uid])
  @@index([draft_uid])
}

model campaign_reports {
  uid                  String    @id @unique @default(uuid(7)) @db.Uuid()
  user_uid             String    @db.Uuid()
  title                String    @db.VarChar(40)
  message              String    @db.VarChar(250)
  schedule             String    @db.VarChar(40)
  target_user          String    @db.VarChar(40)
  delivery_schedules   DateTime  @db.Timestamp(6)
  device               String    @db.VarChar(40)
  players              Int       
  status               status
  credit_usage         String    @db.VarChar(45)
  token_subscriber     String?   @db.VarChar(225)
  created_at           DateTime  @default(now()) @db.Timestamp(3)
  updated_at           DateTime? @updatedAt
  deleted_at           DateTime? @db.Timestamp(3)
  user                 users     @relation(fields: [user_uid], references: [uid], onUpdate: Restrict)

  @@index([uid])
  @@index([user_uid])
}

model subscribers {
  uid          String    @id @unique @default(uuid(7)) @db.Uuid()
  user_uid     String    @db.Uuid()
  token        String    @db.VarChar(255)
  is_subscribe Boolean   @default(true)
  created_at   DateTime  @default(now()) @db.Timestamp(3)
  updated_at   DateTime? @updatedAt
  deleted_at   DateTime? @db.Timestamp(3)
  user         users     @relation(fields: [user_uid], references: [uid])

  @@index([uid])
  @@index([user_uid])
}

model user_password_reset {
  uid        String    @id @unique @default(uuid(7)) @db.Uuid()
  user_uid   String    @db.Uuid()
  email      String    @db.VarChar(40)
  token      String    @db.VarChar(225)
  created_at DateTime  @default(now()) @db.Timestamp(3)
  updated_at DateTime? @updatedAt
  deleted_at DateTime? @db.Timestamp(3)
  user       users     @relation(fields: [user_uid], references: [uid], onUpdate: Restrict)

  @@index([uid])
  @@index([email])
}

enum status {
  PENDING
  SUCCESS
}

enum recipient {
  ALL_USERS
  SPECIFIC_USER
}
